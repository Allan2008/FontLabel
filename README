Copyright Â© 2009 Zynga Game Networks.

All .ttf files in this project are from http://www.webpagepublicity.com/free-fonts.html

This project provides 3 classes which are used to render text in custom fonts.

FontManager
-----------

FontManager is used to cache CGFontRef objects so you can look them up by name,
the same way that UIFont caches its internal font objects by name.

### Usage:

Call `-[FontManager loadFont:]` once for each font you care about, generally as part
of your application startup. You then look up the CGFontRef objects later
with `-[FontManager fontWithName:]`.

NSString (FontLabelStringDrawing)
---------------------------------

This category is modeled after NSString (UIStringDrawing) and provides the basic mechanism
for drawing text in a given CGFontRef. It differs in three key areas from UIStringDrawing:

* Wrapping of sized/drawn strings properly character-wraps really long words that cannot fit
  on a single line by themselves even when the lineBreakMode is UILineBreakModeWordWrap.
  UIStringDrawing appears to behave incorrectly under the same circumstances.
* Only UILineBreakModeWordWrap is supported at the moment.
* UIFont reports a larger ascender for the system font (Helvetica) than FontLabelStringDrawing.
  I cannot figure out why this is. This means UIStringDrawing/UILabel will size any text
  rendered in Helvetica with a taller bounding box than FontLabelStringDrawing. I have not seen
  this behavior on any other fonts. I suspect it is a hard-coded edge case in UIFont.

Usage should be the same as the corresponding methods from UIStringDrawing.

FontLabel
---------

This is a subclass of UILabel that draws text using a CGFontRef/pointSize pair instead
of a UIFont. It uses FontLabelStringDrawing internally to do the heavy lifting. At the moment
it does not support wrapping. `-sizeToFit` works, as do the
standard `textAlignment`/`textColor` properties.

The following properties are ignored:

* adjustsFontSizeToFitWidth
* baselineAdjustment
* enabled
* font (use cgFont/pointSize instead)
* highlighted
* highlightedTextColor
* lineBreakMode
* minimumFontSize
* numberOfLines
* shadowColor
* shadowOffset

## TODO
- grep "TODO" in Classes/
- add line wrapping
- add support for markup
- support more properties from UILabel
